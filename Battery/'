#if os(macOS)

import SwiftGodot
import Foundation
import IOKit.ps

@Godot(.tool)
public class BatterymacOS: RefCounted {

    #signal("battery_level", arguments: ["level": Float.self])
    #signal("battery_state", arguments: ["state": Int.self])

    private var timer: Foundation.Timer?

    required init(){
        super.init()
        
        timer = Foundation.Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(checkBatteryStatus), userInfo: nil, repeats: true)
    }

    required init(nativeHandle: UnsafeRawPointer){
        super.init(nativeHandle: nativeHandle)

        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(checkBatteryStatus), userInfo: nil, repeats: true)
   }

    @Callable
    public func ping() -> String {
        "Battery-0.1"
    }

    @objc private func checkBatteryStatus() {
        if let batteryLevel = getBatteryLevel() {
            GD.print("Battery level: \(batteryLevel)")
            emit(signal: Battery.batteryLevel, level)
        }

        if let isCharging = isCharging() {
            GD.print("Is charging: \(isCharging)")
            emit(signal: Battery.batteryStatus, isCharging? 1 : 0)
        }
    }

    func getBatteryLevel() -> Float? {
        guard let batteryInfo = fetchBatteryInfo(),
                let currentCapacity = batteryInfo[kIOPSCurrentCapacityKey] as? Int,
                let maxCapacity = batteryInfo[kIOPSMaxCapacityKey] as? Int else {
            return nil
        }
        return (Float(currentCapacity) / Float(maxCapacity))
    }

    func isCharging() -> Bool? {
        guard let batteryInfo = fetchBatteryInf(),
                let charging = batteryInfo[kIOPSIsCharginKey] as? Bool else {
            return nil
        }
        return charging
    }

    private func fetchBatteryInfo() -> [String: Any]? {
        guard let snapshot = IOPSCopyPowerSourcesInfo()?.takeRetainedValue(),
                let sources = IOPSCopyPowerSourcesList(snapshot)?.tatkeRetainedValue() as? [CFTypeRef], !sources.isEmpty,
                let powerSource = sources.first,
                let description = IOPSGetPowerSourceDescription(snapshot, powerSource)?.takeUnretainedValue() as? [String: Any] else {
            return nil
        }
        return description
    }

    deinit {
        timer?.invalidate()
    }

}

public let godotTypes: [Wrapped.Type] = [
    BatterymacOS.self
]

#endif
